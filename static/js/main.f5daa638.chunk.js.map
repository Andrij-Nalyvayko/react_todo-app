{"version":3,"sources":["TodoList.tsx","App.tsx","index.js"],"names":["TodoList","toDo","setToDo","setEditText","edit","setEdit","todos","editText","filter","className","task","completed","map","todo","todosIndex","findIndex","el","id","key","classNames","editing","onDoubleClick","rename","title","type","checked","readOnly","onClick","items","ref","input","focus","value","onChange","theEvent","target","onKeyPress","e","App","useState","textDone","setTextDone","setFilter","anEvent","currentTarget","classList","contains","onSubmit","preventDefault","oldDate","Date","required","placeholder","length","every","htmlFor","href","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5daa638.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\ninterface Todo {\n  id?: number,\n  title?: string,\n  completed?: boolean,\n}\n\ntype Props = {\n  toDo: Todo[],\n  setToDo?: any,\n  editText?: string,\n  setEditText?: any,\n  edit?: number,\n  setEdit?: any,\n  todos: Todo[],\n  filter?: string,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  toDo,\n  setToDo,\n  setEditText,\n  edit,\n  setEdit,\n  todos,\n  editText,\n  filter \n}) => (\n  <>\n    <ul className=\"todo-list\">\n      {toDo.filter(task => ((typeof filter === 'boolean')\n        ? task.completed === filter\n        : true)).map((todo) => {\n        const todosIndex = toDo.findIndex(el => el.id === todo.id);\n\n        return (\n          <li\n            key={todo.id}\n            className={classNames(\n              { completed: todo.completed },\n              { editing: (edit === todo.id) },\n            )}\n            onDoubleClick={() => {\n              const rename = toDo\n                .filter(el => el.id === todo.id)[0].title;\n\n              setEdit(todo.id);\n              setEditText(rename);\n            }}\n          >\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                checked={toDo[todosIndex].completed}\n                readOnly\n                onClick={() => {\n                  setToDo(toDo.map((items) => {\n                    if (items.id === todo.id) {\n                      return {\n                        ...items,\n                        completed: !toDo[todosIndex].completed,\n                      };\n                    }\n\n                    return { ...items };\n                  }));\n                }}\n              />\n              <label>{todo.title}</label>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => {\n                  setToDo(toDo.filter(el => el.id !== todo.id));\n                }}\n              />\n            </div>\n            <input\n              type=\"text\"\n              className=\"edit\"\n              ref={input => input && input.focus()}\n              value={editText}\n              onChange={theEvent => setEditText(theEvent.target.value)}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  todos.filter(el => el.id === todo.id)[0]\n                    .title = editText;\n\n                  setEdit(0);\n                }\n              }}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  </>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { TodoList } from './TodoList';\n\ninterface Todo {\n  id?: number,\n  title?: string,\n  completed?: boolean,\n}\n\nlet todos: Todo[] = [\n  {\n    id: 1,\n    title: 'Buy a meat',\n    completed: true,\n  },\n  {\n    id: 2,\n    title: 'Go to a doctor',\n    completed: false,\n  },\n  {\n    id: 3,\n    title: 'Go to swiming',\n    completed: false,\n  },\n];\n\nconst App: React.FC = () => {\n  const [toDo, setToDo] = useState(todos);\n  const [textDone, setTextDone] = useState('');\n  const [edit, setEdit] = useState(0);\n  const [filter, setFilter] = useState('All');\n  const [editText, setEditText] = useState('');\n\n  todos = toDo;\n\n  return (\n    <section\n      className=\"todoapp\"\n      onClick={(anEvent) => {\n        const isEdit = anEvent.currentTarget.classList.contains('edit');\n\n        if (isEdit || !edit) {\n          return;\n        }\n\n        todos.filter(el => el.id === edit)[0].title = editText;\n\n        setEdit(0);\n      }}\n    >\n      <header className=\"header\">\n        <h1>todo</h1>\n\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            setToDo(oldDate => [...oldDate, {\n              id: +new Date(),\n              title: textDone,\n              completed: false,\n            }]);\n            setTextDone('');\n          }}\n        >\n          <input\n            required\n            value={textDone}\n            onChange={(e) => {\n              setTextDone(e.target.value);\n            }}\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n          />\n        </form>\n      </header>\n\n      {toDo.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              readOnly\n              checked={toDo.every(todo => todo.completed)}\n              onClick={() => {\n                setToDo(toDo.map(items => ({\n                  ...items,\n                  completed: (!toDo.every(todo => todo.completed)),\n                })));\n              }}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodoList\n              toDo={toDo}\n              setToDo={setToDo}\n              editText={editText}\n              setEditText={setEditText}\n              edit={edit}\n              setEdit={setEdit}\n              todos={todos}\n              filter={filter}\n            />\n          </section>\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {toDo.filter(todo => !todo.completed).length}\n              {` items left`}\n            </span>\n\n            <ul className=\"filters\">\n              <button\n                type=\"button\"\n                onClick={() => setFilter('All')}\n              >\n                <a\n                  href=\"#/\"\n                  className={classNames({ selected: filter === 'All' })}\n                >\n                  All\n                </a>\n              </button>\n\n              <button\n                type=\"button\"\n                onClick={() => setFilter('Active')}\n              >\n                <a\n                  href=\"#/active\"\n                  className={classNames({ selected: filter === 'Active' })}\n                >\n                  Active\n                </a>\n              </button>\n\n              <button\n                onClick={() => setFilter('Completed')}\n                type=\"button\"\n              >\n                <a\n                  href=\"#/completed\"\n                  className={classNames({ selected: filter === 'Completed' })}\n                >\n                  Completed\n                </a>\n              </button>\n            </ul>\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => {\n                setToDo(toDo.filter(task => !task.completed));\n                setFilter('');\n              }}\n            >\n              Clear completed\n            </button>\n          </footer>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}