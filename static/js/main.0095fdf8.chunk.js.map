{"version":3,"sources":["App.jsx","index.js"],"names":["todos","id","title","completed","App","useState","toDo","setToDo","textDone","setTextDone","edit","setEdit","filter","setFilter","editText","setEditText","className","onClick","anEvent","target","classList","contains","el","onSubmit","e","preventDefault","oldDate","Date","required","value","onChange","type","placeholder","length","readOnly","checked","every","todo","map","items","htmlFor","task","todosIndex","findIndex","key","classNames","editing","onDoubleClick","rename","ref","input","focus","theEvent","onKeyPress","href","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0095fdf8.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable react/jsx-filename-extension */\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\n\nlet todos = [\n  {\n    id: 1,\n    title: 'Buy a meat',\n    completed: true,\n  },\n  {\n    id: 2,\n    title: 'Go to a doctor',\n    completed: false,\n  },\n  {\n    id: 3,\n    title: 'Go to swiming',\n    completed: false,\n  },\n];\n\nconst App = () => {\n  const [toDo, setToDo] = useState(todos);\n  const [textDone, setTextDone] = useState('');\n  const [edit, setEdit] = useState(0);\n  const [filter, setFilter] = useState('');\n  const [editText, setEditText] = useState('');\n\n  todos = toDo;\n\n  return (\n    <section\n      className=\"todoapp\"\n      onClick={(anEvent) => {\n        const isEdit = anEvent.target.classList.contains('edit');\n\n        if (isEdit || !edit) {\n          return;\n        }\n\n        todos.filter(el => el.id === edit)[0].title = editText;\n\n        setEdit(0);\n      }}\n    >\n      <header className=\"header\">\n        <h1>todo</h1>\n\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            setToDo(oldDate => [...oldDate, {\n              id: +new Date(),\n              title: textDone,\n              completed: false,\n            }]);\n            setTextDone('');\n          }}\n        >\n          <input\n            required\n            value={textDone}\n            onChange={(e) => {\n              setTextDone(e.target.value);\n            }}\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n          />\n        </form>\n      </header>\n\n      {toDo.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              readOnly\n              checked={toDo.every(todo => todo.completed)}\n              onClick={() => {\n                setToDo(toDo.map(items => ({\n                  ...items,\n                  completed: (!toDo.every(todo => todo.completed)),\n                })));\n              }}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <ul className=\"todo-list\">\n              {toDo.filter(task => ((typeof filter === 'boolean')\n                ? task.completed === filter\n                : true)).map((todo) => {\n                const todosIndex = toDo.findIndex(el => el.id === todo.id);\n\n                return (\n                  <li\n                    key={todo.id}\n                    className={classNames(\n                      { completed: todo.completed },\n                      { editing: (edit === todo.id) },\n                    )}\n                    onDoubleClick={() => {\n                      const rename = toDo\n                        .filter(el => el.id === todo.id)[0].title;\n\n                      setEdit(todo.id);\n                      setEditText(rename);\n                    }}\n                  >\n                    <div className=\"view\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"toggle\"\n                        checked={toDo[todosIndex].completed}\n                        readOnly\n                        onClick={() => {\n                          setToDo(toDo.map((items) => {\n                            if (items.id === todo.id) {\n                              return {\n                                ...items,\n                                completed: !toDo[todosIndex].completed,\n                              };\n                            }\n\n                            return { ...items };\n                          }));\n                        }}\n                      />\n                      <label>{todo.title}</label>\n                      <button\n                        type=\"button\"\n                        className=\"destroy\"\n                        onClick={() => {\n                          setToDo(toDo.filter(el => el.id !== todo.id));\n                        }}\n                      />\n                    </div>\n                    <input\n                      type=\"text\"\n                      className=\"edit\"\n                      ref={input => input && input.focus()}\n                      value={editText}\n                      onChange={theEvent => setEditText(theEvent.target.value)}\n                      onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                          todos.filter(el => el.id === todo.id)[0]\n                            .title = editText;\n\n                          setEdit(0);\n                        }\n                      }}\n                    />\n                  </li>\n                );\n              })}\n            </ul>\n          </section>\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {toDo.filter(todo => !todo.completed).length}\n              {` items left`}\n            </span>\n\n            <ul className=\"filters\">\n              <button\n                type=\"button\"\n                onClick={() => setFilter('')}\n              >\n                <a\n                  href=\"#/\"\n                  className={classNames({ selected: filter === '' })}\n                >\n                  All\n                </a>\n              </button>\n\n              <button\n                type=\"button\"\n                onClick={() => setFilter(false)}\n              >\n                <a\n                  href=\"#/active\"\n                  className={classNames({ selected: filter === false })}\n                >\n                  Active\n                </a>\n              </button>\n\n              <button\n                onClick={() => setFilter(true)}\n                type=\"button\"\n              >\n                <a\n                  href=\"#/completed\"\n                  className={classNames({ selected: filter === true })}\n                >\n                  Completed\n                </a>\n              </button>\n            </ul>\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => {\n                setToDo(toDo.filter(task => !task.completed));\n                setFilter('');\n              }}\n            >\n              Clear completed\n            </button>\n          </footer>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}